// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message_2eproto;
namespace protocol {
class DataInfo;
struct DataInfoDefaultTypeInternal;
extern DataInfoDefaultTypeInternal _DataInfo_default_instance_;
class Directory;
struct DirectoryDefaultTypeInternal;
extern DirectoryDefaultTypeInternal _Directory_default_instance_;
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class Heart;
struct HeartDefaultTypeInternal;
extern HeartDefaultTypeInternal _Heart_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::DataInfo* Arena::CreateMaybeMessage<::protocol::DataInfo>(Arena*);
template<> ::protocol::Directory* Arena::CreateMaybeMessage<::protocol::Directory>(Arena*);
template<> ::protocol::File* Arena::CreateMaybeMessage<::protocol::File>(Arena*);
template<> ::protocol::Heart* Arena::CreateMaybeMessage<::protocol::Heart>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

enum DataType : int {
  HeartBeat = 0,
  reqcheckdir = 1,
  FileDataMsg = 2,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = HeartBeat;
constexpr DataType DataType_MAX = FileDataMsg;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class Heart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Heart) */ {
 public:
  inline Heart() : Heart(nullptr) {}
  ~Heart() override;
  explicit PROTOBUF_CONSTEXPR Heart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heart(const Heart& from);
  Heart(Heart&& from) noexcept
    : Heart() {
    *this = ::std::move(from);
  }

  inline Heart& operator=(const Heart& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heart& operator=(Heart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heart& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heart* internal_default_instance() {
    return reinterpret_cast<const Heart*>(
               &_Heart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Heart& a, Heart& b) {
    a.Swap(&b);
  }
  inline void Swap(Heart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Heart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Heart& from) {
    Heart::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Heart";
  }
  protected:
  explicit Heart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTCPServerStatusFieldNumber = 1,
    kTCPClientStatusFieldNumber = 2,
  };
  // bool TCPServerStatus = 1;
  void clear_tcpserverstatus();
  bool tcpserverstatus() const;
  void set_tcpserverstatus(bool value);
  private:
  bool _internal_tcpserverstatus() const;
  void _internal_set_tcpserverstatus(bool value);
  public:

  // bool TCPClientStatus = 2;
  void clear_tcpclientstatus();
  bool tcpclientstatus() const;
  void set_tcpclientstatus(bool value);
  private:
  bool _internal_tcpclientstatus() const;
  void _internal_set_tcpclientstatus(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Heart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool tcpserverstatus_;
    bool tcpclientstatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  explicit PROTOBUF_CONSTEXPR File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const File& from) {
    File::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kRelativepathFieldNumber = 3,
    kSizeFieldNumber = 2,
    kCrcvalueFieldNumber = 4,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes relativepath = 3;
  void clear_relativepath();
  const std::string& relativepath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relativepath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relativepath();
  PROTOBUF_NODISCARD std::string* release_relativepath();
  void set_allocated_relativepath(std::string* relativepath);
  private:
  const std::string& _internal_relativepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relativepath(const std::string& value);
  std::string* _internal_mutable_relativepath();
  public:

  // int32 size = 2;
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // int32 crcvalue = 4;
  void clear_crcvalue();
  int32_t crcvalue() const;
  void set_crcvalue(int32_t value);
  private:
  int32_t _internal_crcvalue() const;
  void _internal_set_crcvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relativepath_;
    int32_t size_;
    int32_t crcvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class Directory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Directory) */ {
 public:
  inline Directory() : Directory(nullptr) {}
  ~Directory() override;
  explicit PROTOBUF_CONSTEXPR Directory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Directory(const Directory& from);
  Directory(Directory&& from) noexcept
    : Directory() {
    *this = ::std::move(from);
  }

  inline Directory& operator=(const Directory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Directory& operator=(Directory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Directory& default_instance() {
    return *internal_default_instance();
  }
  static inline const Directory* internal_default_instance() {
    return reinterpret_cast<const Directory*>(
               &_Directory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Directory& a, Directory& b) {
    a.Swap(&b);
  }
  inline void Swap(Directory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Directory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Directory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Directory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Directory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Directory& from) {
    Directory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Directory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Directory";
  }
  protected:
  explicit Directory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirListFieldNumber = 1,
    kFileListFieldNumber = 2,
    kRelativepathFieldNumber = 3,
  };
  // repeated .protocol.Directory DirList = 1;
  int dirlist_size() const;
  private:
  int _internal_dirlist_size() const;
  public:
  void clear_dirlist();
  ::protocol::Directory* mutable_dirlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Directory >*
      mutable_dirlist();
  private:
  const ::protocol::Directory& _internal_dirlist(int index) const;
  ::protocol::Directory* _internal_add_dirlist();
  public:
  const ::protocol::Directory& dirlist(int index) const;
  ::protocol::Directory* add_dirlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Directory >&
      dirlist() const;

  // repeated .protocol.File FileList = 2;
  int filelist_size() const;
  private:
  int _internal_filelist_size() const;
  public:
  void clear_filelist();
  ::protocol::File* mutable_filelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::File >*
      mutable_filelist();
  private:
  const ::protocol::File& _internal_filelist(int index) const;
  ::protocol::File* _internal_add_filelist();
  public:
  const ::protocol::File& filelist(int index) const;
  ::protocol::File* add_filelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::File >&
      filelist() const;

  // bytes relativepath = 3;
  void clear_relativepath();
  const std::string& relativepath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relativepath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relativepath();
  PROTOBUF_NODISCARD std::string* release_relativepath();
  void set_allocated_relativepath(std::string* relativepath);
  private:
  const std::string& _internal_relativepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relativepath(const std::string& value);
  std::string* _internal_mutable_relativepath();
  public:

  // @@protoc_insertion_point(class_scope:protocol.Directory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Directory > dirlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::File > filelist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relativepath_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class DataInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.DataInfo) */ {
 public:
  inline DataInfo() : DataInfo(nullptr) {}
  ~DataInfo() override;
  explicit PROTOBUF_CONSTEXPR DataInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataInfo(const DataInfo& from);
  DataInfo(DataInfo&& from) noexcept
    : DataInfo() {
    *this = ::std::move(from);
  }

  inline DataInfo& operator=(const DataInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataInfo& operator=(DataInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataInfo* internal_default_instance() {
    return reinterpret_cast<const DataInfo*>(
               &_DataInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DataInfo& a, DataInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DataInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataInfo& from) {
    DataInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.DataInfo";
  }
  protected:
  explicit DataInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kMsgidFieldNumber = 1,
  };
  // bytes info = 2;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // int32 msgid = 1;
  void clear_msgid();
  int32_t msgid() const;
  void set_msgid(int32_t value);
  private:
  int32_t _internal_msgid() const;
  void _internal_set_msgid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.DataInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    int32_t msgid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Heart

// bool TCPServerStatus = 1;
inline void Heart::clear_tcpserverstatus() {
  _impl_.tcpserverstatus_ = false;
}
inline bool Heart::_internal_tcpserverstatus() const {
  return _impl_.tcpserverstatus_;
}
inline bool Heart::tcpserverstatus() const {
  // @@protoc_insertion_point(field_get:protocol.Heart.TCPServerStatus)
  return _internal_tcpserverstatus();
}
inline void Heart::_internal_set_tcpserverstatus(bool value) {
  
  _impl_.tcpserverstatus_ = value;
}
inline void Heart::set_tcpserverstatus(bool value) {
  _internal_set_tcpserverstatus(value);
  // @@protoc_insertion_point(field_set:protocol.Heart.TCPServerStatus)
}

// bool TCPClientStatus = 2;
inline void Heart::clear_tcpclientstatus() {
  _impl_.tcpclientstatus_ = false;
}
inline bool Heart::_internal_tcpclientstatus() const {
  return _impl_.tcpclientstatus_;
}
inline bool Heart::tcpclientstatus() const {
  // @@protoc_insertion_point(field_get:protocol.Heart.TCPClientStatus)
  return _internal_tcpclientstatus();
}
inline void Heart::_internal_set_tcpclientstatus(bool value) {
  
  _impl_.tcpclientstatus_ = value;
}
inline void Heart::set_tcpclientstatus(bool value) {
  _internal_set_tcpclientstatus(value);
  // @@protoc_insertion_point(field_set:protocol.Heart.TCPClientStatus)
}

// -------------------------------------------------------------------

// File

// string filename = 1;
inline void File::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& File::filename() const {
  // @@protoc_insertion_point(field_get:protocol.File.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.File.filename)
}
inline std::string* File::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:protocol.File.filename)
  return _s;
}
inline const std::string& File::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void File::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_filename() {
  // @@protoc_insertion_point(field_release:protocol.File.filename)
  return _impl_.filename_.Release();
}
inline void File::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.File.filename)
}

// int32 size = 2;
inline void File::clear_size() {
  _impl_.size_ = 0;
}
inline int32_t File::_internal_size() const {
  return _impl_.size_;
}
inline int32_t File::size() const {
  // @@protoc_insertion_point(field_get:protocol.File.size)
  return _internal_size();
}
inline void File::_internal_set_size(int32_t value) {
  
  _impl_.size_ = value;
}
inline void File::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:protocol.File.size)
}

// bytes relativepath = 3;
inline void File::clear_relativepath() {
  _impl_.relativepath_.ClearToEmpty();
}
inline const std::string& File::relativepath() const {
  // @@protoc_insertion_point(field_get:protocol.File.relativepath)
  return _internal_relativepath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_relativepath(ArgT0&& arg0, ArgT... args) {
 
 _impl_.relativepath_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.File.relativepath)
}
inline std::string* File::mutable_relativepath() {
  std::string* _s = _internal_mutable_relativepath();
  // @@protoc_insertion_point(field_mutable:protocol.File.relativepath)
  return _s;
}
inline const std::string& File::_internal_relativepath() const {
  return _impl_.relativepath_.Get();
}
inline void File::_internal_set_relativepath(const std::string& value) {
  
  _impl_.relativepath_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_relativepath() {
  
  return _impl_.relativepath_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_relativepath() {
  // @@protoc_insertion_point(field_release:protocol.File.relativepath)
  return _impl_.relativepath_.Release();
}
inline void File::set_allocated_relativepath(std::string* relativepath) {
  if (relativepath != nullptr) {
    
  } else {
    
  }
  _impl_.relativepath_.SetAllocated(relativepath, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relativepath_.IsDefault()) {
    _impl_.relativepath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.File.relativepath)
}

// int32 crcvalue = 4;
inline void File::clear_crcvalue() {
  _impl_.crcvalue_ = 0;
}
inline int32_t File::_internal_crcvalue() const {
  return _impl_.crcvalue_;
}
inline int32_t File::crcvalue() const {
  // @@protoc_insertion_point(field_get:protocol.File.crcvalue)
  return _internal_crcvalue();
}
inline void File::_internal_set_crcvalue(int32_t value) {
  
  _impl_.crcvalue_ = value;
}
inline void File::set_crcvalue(int32_t value) {
  _internal_set_crcvalue(value);
  // @@protoc_insertion_point(field_set:protocol.File.crcvalue)
}

// -------------------------------------------------------------------

// Directory

// repeated .protocol.Directory DirList = 1;
inline int Directory::_internal_dirlist_size() const {
  return _impl_.dirlist_.size();
}
inline int Directory::dirlist_size() const {
  return _internal_dirlist_size();
}
inline void Directory::clear_dirlist() {
  _impl_.dirlist_.Clear();
}
inline ::protocol::Directory* Directory::mutable_dirlist(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Directory.DirList)
  return _impl_.dirlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Directory >*
Directory::mutable_dirlist() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Directory.DirList)
  return &_impl_.dirlist_;
}
inline const ::protocol::Directory& Directory::_internal_dirlist(int index) const {
  return _impl_.dirlist_.Get(index);
}
inline const ::protocol::Directory& Directory::dirlist(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Directory.DirList)
  return _internal_dirlist(index);
}
inline ::protocol::Directory* Directory::_internal_add_dirlist() {
  return _impl_.dirlist_.Add();
}
inline ::protocol::Directory* Directory::add_dirlist() {
  ::protocol::Directory* _add = _internal_add_dirlist();
  // @@protoc_insertion_point(field_add:protocol.Directory.DirList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Directory >&
Directory::dirlist() const {
  // @@protoc_insertion_point(field_list:protocol.Directory.DirList)
  return _impl_.dirlist_;
}

// repeated .protocol.File FileList = 2;
inline int Directory::_internal_filelist_size() const {
  return _impl_.filelist_.size();
}
inline int Directory::filelist_size() const {
  return _internal_filelist_size();
}
inline void Directory::clear_filelist() {
  _impl_.filelist_.Clear();
}
inline ::protocol::File* Directory::mutable_filelist(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Directory.FileList)
  return _impl_.filelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::File >*
Directory::mutable_filelist() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Directory.FileList)
  return &_impl_.filelist_;
}
inline const ::protocol::File& Directory::_internal_filelist(int index) const {
  return _impl_.filelist_.Get(index);
}
inline const ::protocol::File& Directory::filelist(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Directory.FileList)
  return _internal_filelist(index);
}
inline ::protocol::File* Directory::_internal_add_filelist() {
  return _impl_.filelist_.Add();
}
inline ::protocol::File* Directory::add_filelist() {
  ::protocol::File* _add = _internal_add_filelist();
  // @@protoc_insertion_point(field_add:protocol.Directory.FileList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::File >&
Directory::filelist() const {
  // @@protoc_insertion_point(field_list:protocol.Directory.FileList)
  return _impl_.filelist_;
}

// bytes relativepath = 3;
inline void Directory::clear_relativepath() {
  _impl_.relativepath_.ClearToEmpty();
}
inline const std::string& Directory::relativepath() const {
  // @@protoc_insertion_point(field_get:protocol.Directory.relativepath)
  return _internal_relativepath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Directory::set_relativepath(ArgT0&& arg0, ArgT... args) {
 
 _impl_.relativepath_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.Directory.relativepath)
}
inline std::string* Directory::mutable_relativepath() {
  std::string* _s = _internal_mutable_relativepath();
  // @@protoc_insertion_point(field_mutable:protocol.Directory.relativepath)
  return _s;
}
inline const std::string& Directory::_internal_relativepath() const {
  return _impl_.relativepath_.Get();
}
inline void Directory::_internal_set_relativepath(const std::string& value) {
  
  _impl_.relativepath_.Set(value, GetArenaForAllocation());
}
inline std::string* Directory::_internal_mutable_relativepath() {
  
  return _impl_.relativepath_.Mutable(GetArenaForAllocation());
}
inline std::string* Directory::release_relativepath() {
  // @@protoc_insertion_point(field_release:protocol.Directory.relativepath)
  return _impl_.relativepath_.Release();
}
inline void Directory::set_allocated_relativepath(std::string* relativepath) {
  if (relativepath != nullptr) {
    
  } else {
    
  }
  _impl_.relativepath_.SetAllocated(relativepath, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relativepath_.IsDefault()) {
    _impl_.relativepath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Directory.relativepath)
}

// -------------------------------------------------------------------

// DataInfo

// int32 msgid = 1;
inline void DataInfo::clear_msgid() {
  _impl_.msgid_ = 0;
}
inline int32_t DataInfo::_internal_msgid() const {
  return _impl_.msgid_;
}
inline int32_t DataInfo::msgid() const {
  // @@protoc_insertion_point(field_get:protocol.DataInfo.msgid)
  return _internal_msgid();
}
inline void DataInfo::_internal_set_msgid(int32_t value) {
  
  _impl_.msgid_ = value;
}
inline void DataInfo::set_msgid(int32_t value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:protocol.DataInfo.msgid)
}

// bytes info = 2;
inline void DataInfo::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& DataInfo::info() const {
  // @@protoc_insertion_point(field_get:protocol.DataInfo.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataInfo::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.DataInfo.info)
}
inline std::string* DataInfo::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:protocol.DataInfo.info)
  return _s;
}
inline const std::string& DataInfo::_internal_info() const {
  return _impl_.info_.Get();
}
inline void DataInfo::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* DataInfo::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* DataInfo::release_info() {
  // @@protoc_insertion_point(field_release:protocol.DataInfo.info)
  return _impl_.info_.Release();
}
inline void DataInfo::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.DataInfo.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::DataType>() {
  return ::protocol::DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
